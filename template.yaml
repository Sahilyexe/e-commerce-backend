# Plantilla SAM con los recursos serverless necesarios para 

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  actualizacion-datos-bakend

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  EndpointSubcription:
    Type: String
# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  crearsesion:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-sesion.putItemHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref sesion
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_CARRITO: !Ref sesion
      Events:
        ApiCrearSesion:
          Type: Api
          Properties:
            Path: /crearsesion
            Method: POST
       #     RestApiId: !Ref ApiGatewayApi
  # crearorden:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: src/handlers/put-orden.putItemHandler
  #     Runtime: nodejs14.x
  #     Architectures:
  #       - x86_64
  #     MemorySize: 128
  #     Timeout: 100
  #     Description: esta tabla guarda ya la compra final.
  #     Policies:
  #       # Give Create/Read/Update/Delete Permissions to the SampleTable
  #       - DynamoDBCrudPolicy:
  #           TableName: !Ref transacciones
  #     Environment:
  #       Variables:
  #         # Make table name accessible as environment variable from function code during execution
  #         TABLE_ORDEN: !Ref transacciones
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /crearOrden
  #           Method: POST
  #      #     RestApiId: !Ref ApiGatewayApi
  getsesion:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-sesion.getByIdHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Metodo para consultar a traves de un id.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref sesion
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_CARRITO: !Ref sesion
      Events:
        ApiGetSesion:
          Type: Api
          Properties:
            Path: /obtenerOrden/{id}
            Method: GET

  # publishSMS:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: src/handlers/publish-sms.publishHandler
  #     Runtime: nodejs14.x
  #     Architectures:
  #       - x86_64
  #     MemorySize: 128
  #     Timeout: 100
  #     Description: Metodo para consultar a traves de un id.
  #     Role: !GetAtt RootRole.Arn
      
  # RootRole:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - lambda.amazonaws.com
  #           Action:
  #             - 'sts:AssumeRole'
  #     Path: /
  #     Policies:
  #       - PolicyName: RolEjecucionLambda
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - logs:CreateLogGroup
  #                 - logs:CreateLogStream
  #                 - logs:PutLogEvents
  #               Resource: '*'
  #       - PolicyName: RolPublish
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - sns:*
  #               Resource: '*'
  crearproducto:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-producto.putItemHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Aqui se almacenan los productos cuando los creas
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref producto
        # - S3CrudPolicy: 
        #     BucketName: !Ref WebBucket
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_PRODUCTO: !Ref producto
          WEB_BUCKET: !Sub e-commerce-${AWS::Region}-${AWS::AccountId}
      Events:
        ApiCrearProducto:
          Type: Api
          Properties:
            Path: /crearproducto
            Method: POST
       #     RestApiId: !Ref ApiGatewayApi
  getProductos:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-productos.getByIdHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Se consultas todos los productos
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref producto
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_PRODUCTO: !Ref producto
      Events:
        ApiGetProductos:
          Type: Api
          Properties:
            Path: /getProductos
            Method: GET
  getProducto:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-producto.getByIdHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Se consulta un producto
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref producto
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_PRODUCTO: !Ref producto
      Events:
        ApiGetProducto:
          Type: Api
          Properties:
            Path: /getProducto/{id}
            Method: GET

  RebajarDelStock:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/rebajar-stock.rebajarStockIdHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Se consulta un producto
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref producto
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_PRODUCTO: !Ref producto          

  invokeStepFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/invoke-step-function.invokeStepFunctionHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Se consulta un producto
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - StepFunctionsExecutionPolicy:
            StateMachineName: !Ref EccomerceStateMachine
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          STATE_MACHINE: !Ref EccomerceStateMachine
      Events:
        ApiGetProducto:
          Type: Api
          Properties:
            Path: /Comprar
            Method: POST
            RestApiId: 
              Ref: MyRestApi
 
  producto:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  
  sesion:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  transacciones:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  WebBucket:
    Type: AWS::S3::Bucket
    Properties: 
     BucketName: !Sub 'e-commerce-${AWS::Region}-${AWS::AccountId}'
     VersioningConfiguration: 
      Status: 'Enabled'
     PublicAccessBlockConfiguration: 
       BlockPublicAcls: false
       BlockPublicPolicy: false
       IgnorePublicAcls: false
       RestrictPublicBuckets: false
     BucketEncryption:
       ServerSideEncryptionConfiguration:
         - ServerSideEncryptionByDefault:
             SSEAlgorithm: 'AES256'
     WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
   
   
  BucketPolicyWebSite:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref WebBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref WebBucket
                - /*
            Principal: '*'
  
  EccomerceStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/stock_trader.asl.json
      # RoleArn: !GetAtst StepfunctionRole.Arn
      DefinitionSubstitutions:
        RebajarInventario: !GetAtt RebajarDelStock.Arn
        EnviaCorreoArn: !GetAtt TopicEcommerce.TopicArn
      #  DBUpdateproducto: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
      #   DBGetproducto: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        tableProducto: !Ref producto
        AprobacionCompra: !Ref AprobacionActivity
        ConfirmacionCompra: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/aprobaciones/aprobar"
        NoConfirmacionCompra: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/aprobaciones/rechazar"
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref RebajarDelStock
        - DynamoDBCrudPolicy:
            TableName: !Ref producto
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt TopicEcommerce.TopicName
  #     Events:
  #       DisparaStateMachine:
  #         Type: Api
  #         Properties:
  #           Path: /Comprar 
  #           Method: post
  #           RestApiId: 
  #             Ref: MyRestApi
  MyRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Description: A test API
      Name: DisparaStateMachineCompra
      StageName: Prod
      MethodSettings:
        - ResourcePath: /
          HttpMethod: POST       
  
  TopicEcommerce:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: 
            !Ref EndpointSubcription
          Protocol: email
        
      TopicName: !Sub 'NotificaNuevaCompra-${AWS::Region}-${AWS::AccountId}'

  AprobacionActivity:
    Type: AWS::StepFunctions::Activity
    Properties: 
      Name: maker-checker

  AprobacionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/send-success-failure.aprobacionHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Se aprueba o se rechaza la compra
      Role: !GetAtt StepfunctionRole.Arn
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          ACTIVITY: !GetAtt AprobacionActivity.Arn
      Events:
        ApiAprobaciones:
          Type: Api
          Properties:
            Path: /aprobaciones/{id}
            Method: GET
  StepfunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LambdaActivityPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:SendTaskSuccess
                  - states:SendTaskFailure
                  - states:GetActivityTask
                Resource: !Ref AprobacionActivity
        - PolicyName: LambdaExcecutionPolicymine
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  StateMachineEndPoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${MyRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  WebBucket:
    Description: "Bucket donde se guarda el front"
    Value: !Sub 'e-commerce-${AWS::Region}-${AWS::AccountId}'



